/*
 * -------------------------------------------------
 *  mpozud00/demultiplexing Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

 //Function to create the run folder
 import java.text.SimpleDateFormat
 def date = new Date()
 def sdf = new SimpleDateFormat("MM-dd-yyyy-HH:mm:ss")
 def df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
 date1 = sdf.format(date)
 params.run = date1
 date2 = df.format(date)
 params.timestamp= date2


// Global default params, used in configs
params {

  // Pipeline Options
  // Needed options
  nucleotide_DB = false
  protein_DB = false

  // Defaults
  project = false

  // Boilerplate options
  clusterOptions = false
  name = false
  publish_dir_mode = 'copy'
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  monochrome_logs = false
  help = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.run}/pipeline_info"
  igenomesIgnore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'biobakery/kneaddata'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity {
    singularity.enabled = true
    singularity.engineOptions = "-B /datos/ngs/dato-activo/:/datos/ngs/dato-activo/"
    singularity.autoMounts = true
    }
}

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
docker.runOptions = '-u \$(id -u):\$(id -g)'

// Capture exit codes from upstream processes when piping
process.executor = 'slurm'
process.queue = 'short'
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'mpozuelo/demultiplexing'
  author = 'Marta Pozuelo'
  homePage = 'https://github.com/mpozud00/demultiplexing'
  description = 'Nextflow demultiplexing pipeline.'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.04.0'
  version = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
